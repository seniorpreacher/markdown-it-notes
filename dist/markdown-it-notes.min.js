!function(e) {
    if ("object" == typeof exports && "undefined" != typeof module) module.exports = e(); else if ("function" == typeof define && define.amd) define([], e); else {
        ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).markdownitNotes = e();
    }
}(function() {
    return function() {
        return function e(n, t, r) {
            function o(f, s) {
                if (!t[f]) {
                    if (!n[f]) {
                        var u = "function" == typeof require && require;
                        if (!s && u) return u(f, !0);
                        if (i) return i(f, !0);
                        var c = new Error("Cannot find module '" + f + "'");
                        throw c.code = "MODULE_NOT_FOUND", c;
                    }
                    var l = t[f] = {
                        exports: {}
                    };
                    n[f][0].call(l.exports, function(e) {
                        return o(n[f][1][e] || e);
                    }, l, l.exports, e, n, t, r);
                }
                return t[f].exports;
            }
            for (var i = "function" == typeof require && require, f = 0; f < r.length; f++) o(r[f]);
            return o;
        };
    }()({
        1: [ function(e, n, t) {
            "use strict";
            n.exports = ((e, n) => {
                const t = 1, r = -1, o = 0, i = (e, n, i) => {
                    const f = e.content.trimLeft();
                    if (f.length < 2) return e;
                    const s = i.noteTypes || {}, u = Object.getOwnPropertyNames(s).find(e => f.startsWith(e));
                    if (!u) return e;
                    const c = " " + f.substr(u.length).trimLeft();
                    return ((e, n, i, f) => {
                        const s = [];
                        let u;
                        const c = [ ...f.iconClassList || [], e ].join(" ");
                        return (u = new i("note_icon_open", "i", t)).attrs = [ [ "class", c ] ], s.push(u), 
                        s.push(new i("note_icon_close", "i", r)), (u = new i("text", "", o)).content = n, 
                        s.push(u), s;
                    })(s[u], c, n, i);
                };
                e.core.ruler.push("inline_note", e => ((e, n) => (n = n || {}, e.tokens.filter(e => "inline" === e.type).forEach(t => {
                    for (let r = t.children.length - 1; r >= 0; r--) {
                        const o = i(t.children[r], e.Token, n);
                        t.children = e.md.utils.arrayReplaceAt(t.children, r, o);
                    }
                })))(e, n));
            });
        }, {} ]
    }, {}, [ 1 ])(1);
});
